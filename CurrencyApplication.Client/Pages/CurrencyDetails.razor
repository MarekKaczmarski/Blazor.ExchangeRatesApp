@page "/currency-detail/{code}"

@using Serilog
@using CurrencyApplication.Client.Services;
@using CurrencyApplication.Client.Helpers;
@using CurrencyApplication.Models;
@using Color = MudBlazor.Color

@inject ICurrencyService CurrencyService

@if (Rate != null && Rate.Rates != null && Rate.Rates.Any())
{
    <h3 class="d-flex align-items-center">
        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(Rate.Code)" alt="@Rate.Code" width="48" height="48" class="mr-1" />
        @FirstLetterToUpper(Rate.Currency) (@Rate.Code)
    </h3>
    <h2>@currentMid</h2>
    <h4>@currentDate.ToShortDateString()</h4>
    <h6>
        <span>YTD (Year To Date): </span>
        <span style='color: @(YTDPercentage < 0 ? "red" : "green")'>
            @YTDPercentage.ToString("0.00")%
        </span>
    </h6>

    <ApexChart TItem="Rate"
               Title="Historia Kursu"
               Options="@options"
               @ref="chart">

        <ApexPointSeries TItem="Rate"
                         Items="Rate.Rates"
                         Name="Kurs średni"
                         SeriesType="SeriesType.Line"
                         XValue="rate => rate.EffectiveDate.Date.ToShortDateString()"
                         YValue="rate => rate.Mid" />
    </ApexChart>

    <MudPaper Class="d-flex align-start flex-grow-1 gap-2" Elevation="0">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(1)">1M</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(3)">3M</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(6)">6M</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(12)">1Y</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleCustomButtonClick()">WŁASNE</MudButton>
        <MudDateRangePicker 
            @ref="_picker"
            @bind-DateRange="_dateRange"
            Style="width: 300px"
            Label="Wybierz przedział czasowy" 
            AutoClose="@_autoClose" 
            Clearable="true" 
            DateFormat="yyyy-MM-dd"
            IsDateDisabledFunc="@FutureDate">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Wyczyść</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">Anuluj</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                </PickerActions>
        </MudDateRangePicker>
    </MudPaper>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudPaper Class="d-flex align-start flex-grow-1 gap-4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseErrorNotification())">@errorMessage</MudAlert>
        </MudPaper>
    }
    <MudTable Items="@Rate.Rates" Class="mt-4">
        <HeaderContent>
            <MudTh>Tabela</MudTh>
            <MudTh>Data</MudTh>
            <MudTh>Średni kurs</MudTh>
        </HeaderContent>
        <RowTemplate Context="rate">
            <MudTd>@rate.No</MudTd>
            <MudTd>@rate.EffectiveDate</MudTd>
            <MudTd>@rate.Mid</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText>Ładowanie...</MudText>
}


@code {
    [Parameter]
    public string? Code { get; set; }

    private CurrencyRates? Rate { get; set; }

    private DateTime currentDate;
    private decimal currentMid;

    private DateTime? date { get; set; }
    private ApexChartOptions<Rate>? options;
    private ApexChart<Rate>? chart;

    private decimal YTDPercentage { get; set; }

    private MudDateRangePicker? _picker;
    private DateRange? _dateRange;
    private bool _autoClose;

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadRatesForYTD();
        await LoadRatesForPeriod(1);
        await base.OnInitializedAsync();
    }

    private async Task LoadRatesForPeriod(int months)
    {
        var startDate = DateTime.Now.AddMonths(-months);
        var endDate = DateTime.Now;
        await LoadRates(startDate, endDate);
    }

    private async Task LoadRatesForCustomPeriod()
    {
        if (_dateRange != null && _dateRange.Start.HasValue && _dateRange.End.HasValue && _picker != null)
        {
            var startDate = _dateRange.Start.Value;
            var endDate = _dateRange.End.Value;
            await LoadRates(startDate, endDate);
        }
    }

    private async Task LoadRates(DateTime startDate, DateTime endDate)
    {
        if (CurrencyService == null)
        {
            return;
        }

        try
        {
            Rate = await CurrencyService.GetCurrencyRatesInRange(Code, startDate, endDate);

            if (Rate == null)
            {
                return;
            }

            if (currentMid == 0 && currentDate == DateTime.MinValue && Rate.Rates.Any())
            {
                currentMid = Rate.Rates[^1].Mid;
                currentDate = Rate.Rates[^1].EffectiveDate;
            }

            options = new ApexChartOptions<Rate>
                {
                    Chart = new Chart
                    {
                        Height = 500,
                        Width = "100%",
                        Toolbar = new Toolbar
                        {
                            Show = false
                        },
                    },

                };
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message + "Brak kursów dla podanego przedziału czasowego";           
        }
    }

    private async Task HandleButtonClick(int months)
    {
        await LoadRatesForPeriod(months);
        StateHasChanged();
        await chart.UpdateSeriesAsync(true);
    }

    private async Task HandleCustomButtonClick()
    {
        await LoadRatesForCustomPeriod();
        StateHasChanged();
        await chart.UpdateSeriesAsync(true);
    }

    string FirstLetterToUpper(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        return char.ToUpperInvariant(input[0]) + input.Substring(1);
    }

    private async Task LoadRatesForYTD()
    {
        var startDateYTD = new DateTime(DateTime.Now.Year, 1, 1);
        var endDateYTD = DateTime.Now;

        var ratesForYTD = await CurrencyService.GetCurrencyRatesInRange(Code, startDateYTD, endDateYTD);

        if (ratesForYTD == null || ratesForYTD.Rates == null || ratesForYTD.Rates.Count == 0)
        {
            YTDPercentage = 0;
            return;
        }

        decimal initialValue = ratesForYTD.Rates.First().Mid;
        decimal finalValue = ratesForYTD.Rates.Last().Mid;

        decimal percentageChange = ((finalValue / initialValue) - 1) * 100;

        YTDPercentage = percentageChange;
    }

    decimal CalculateYTD(List<Rate> rates)
    {
        if (rates == null || rates.Count == 0)
        {
            return 0;
        }

        rates = rates.OrderBy(rate => rate.EffectiveDate).ToList();

        decimal firstMid = rates.First().Mid;
        decimal lastMid = rates.Last().Mid;

        decimal ytdPercentage = ((lastMid / firstMid) - 1) * 100;

        string formattedResult = ytdPercentage.ToString("0.00");

        return decimal.Parse(formattedResult);
    }

    private void CloseErrorNotification()
    {
        errorMessage = string.Empty;
    }

    private bool FutureDate(DateTime dt)
    {
        DateTime today = DateTime.Now.Date;
        return dt.Date > today;
    }

}

