@page "/currency-list"

@using Serilog;
@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using MudBlazor

@inject ICurrencyService CurrencyService

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
</div>

<MudContainer>
    
        <h3>Rate List</h3>

        @if (Rates == null)
        {
            <MudTypography Variant="TypographyVariant.h6" Class="mt-4" Color="Color.Primary">
                Loading currencies...
            </MudTypography>
        }
        else
        {
        <MudTable Items="@Rates" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Rate,bool>(FilterFunc1)" SortLabel="Sort By" AllowUnsorted="false">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Periodic Elements</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Rate, object>(x=>x.Currency)">Currency</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Rate, object>(x=>x.Code)">Code</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Rate, object>(x=>x.Mid)">Mid</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudImage Src="@($"/images/flags/{context.Code.ToLower()}.png")" Width="24" Height="24" Alt="@context.Currency" Elevation="25" />
                </MudTd>
                <MudTd DataLabel="Currency">@context.Currency</MudTd>
                <MudTd DataLabel="Code">@context.Code</MudTd>
                <MudTd DataLabel="Mid">@context.Mid</MudTd>
            </RowTemplate>
        </MudTable>

        }

</MudContainer>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private IEnumerable<Rate> Rates = new List<Rate>();

    protected override async Task OnInitializedAsync()
    {
        Rates = await CurrencyService.GetAllRatesFromAllTables();
    }

    private bool FilterFunc1(Rate element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Rate element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Currency.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Mid}".Contains(searchString))
            return true;
        return false;
    }
}
