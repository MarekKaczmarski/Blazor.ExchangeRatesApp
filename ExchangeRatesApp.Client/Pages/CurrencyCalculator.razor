@page "/currency-calculator"
@using ExchangeRatesApp.Client.Services
@using ExchangeRatesApp.Client.Helpers
@using ExchangeRatesApp.Models
@using Color = MudBlazor.Color;
@inject ICurrencyService CurrencyService

<h3>Konwerter Walutowy</h3>

@* <MudSelect @bind-Value="@sourceCurrencyCode" Label="Z waluty" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @if (currencies != null)
    {
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <MudSelectItem Value="@(currency.Code)">
                <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="14" class="mr-1" /> @currency.Code
            </MudSelectItem>
        }
    }
</MudSelect>

<MudNumericField @bind-Value="amountToConvert" Label="Wprowadź wartość" Variant="Variant.Outlined" @oninput="ConvertCurrency" />

<MudSelect @bind-Value="@targetCurrencyCode" Label="Na walutę" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @if (currencies != null)
    {
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <MudSelectItem Value="@currency.Code">
                <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" alt="@currency.Code" height="14" class="mr-1" /> @currency.Code
            </MudSelectItem>
        }
    }
</MudSelect> *@

@* <MudItem xs="12" sm="6" md="4">
    <MudAutocomplete T="string" Label="Z waluty" @bind-Value="sourceCurrencyCode" SearchFunc="@Search1" Variant="Variant.Outlined" />
</MudItem>

<MudItem xs="12" sm="6" md="4">
    <MudAutocomplete T="string" Label="Na walutę" @bind-Value="targetCurrencyCode" SearchFunc="@Search1" Variant="Variant.Outlined" />
</MudItem> *@

<MudGrid>
    <MudItem xs="5">
        <MudAutocomplete @bind-Value="@sourceCurrencyCode" Label="Z waluty" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SearchFunc="SearchCurrency">
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="14" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudAutocomplete>
    </MudItem>

    <MudItem xs="2">
        <MudNumericField @bind-Value="amountToConvert" Label="Wprowadź wartość" Variant="Variant.Outlined" @oninput="ConvertCurrency" />
    </MudItem>

    <MudItem xs="5">
        <MudAutocomplete @bind-Value="@targetCurrencyCode" Label="Na walutę" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SearchFunc="SearchCurrency">
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="14" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudAutocomplete>
    </MudItem>
</MudGrid>


@* BEZ WYSZUKIWANIA *@
<MudGrid>
    <MudItem xs="5">
        <MudSelect Class="d-flex align-left justify-center" FullWidth="false" @bind-Value="@sourceCurrencyCode" Label="Z waluty" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="24" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="2">
        <MudNumericField Class="d-flex align-left justify-center" @bind-Value="amountToConvert" Label="Wprowadź wartość" Variant="Variant.Outlined" @oninput="ConvertCurrency" />
    </MudItem>

    <MudItem xs="5">
        <MudSelect Class="d-flex align-left justify-center" FullWidth="false" @bind-Value="@targetCurrencyCode" Label="Na walute" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="24" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" Class="d-flex align-center justify-center">
        <MudButton Class="d-flex align-center justify-center" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.SwapHoriz" Color="Color.Primary" OnClick="SwapCurrencies">Zamień</MudButton>
    </MudItem>

    <MudItem xs="12" Class="d-flex align-center justify-center">
        <MudButton Class="d-flex align-center justify-center" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Calculate" Color="Color.Primary" OnClick="ConvertCurrency">Przewalutuj</MudButton>
    </MudItem>

    <MudItem xs="12" Class="d-flex align-center justify-center">
        @if (showResult)
        {
            <MudPaper>
                <div style="font-size: 32px;">
                    @if (sourceCurrencyCode != null && targetCurrencyCode != null)
                    {
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(sourceCurrencyCode)" height="32" class="mr-1" />
                        <span >@result</span>
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(targetCurrencyCode)" height="32" class="mr-1" />
                    }
                </div>
            </MudPaper>
        }
    </MudItem>
</MudGrid>

@code {
    private List<CurrencyRates> currencies;
    private IEnumerable<Rate> uniqueCurrencies;
    private string sourceCurrencyCode = "";
    private string targetCurrencyCode = "";
    private string result;
    private bool showResult = false;

    private string selectedSourceCurrency;
    private string selectedTargetCurrency;

    private decimal amountToConvert = 1.0m; // Domyślna wartość 1.0

    protected override async Task OnInitializedAsync()
    {
        currencies = await CurrencyService.GetAllCurrenciesFromAllTables();
        uniqueCurrencies = currencies.SelectMany(cr => cr.Rates).GroupBy(rate => rate.Code).Select(group => group.First());
    }

    private async Task ConvertCurrency()
    {
        showResult = true;
        if (currencies != null)
        {
            if (sourceCurrencyCode == targetCurrencyCode)
            {
                result = "Wybrano dwie takie same waluty.";
                return;
            }

            var sourceCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == sourceCurrencyCode);

            var targetCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == targetCurrencyCode);

            if (sourceCurrency != null && targetCurrency != null)
            {
                var convertedAmount = CalculateConvertedAmount(sourceCurrency, targetCurrency);
                result = $"{amountToConvert} {sourceCurrencyCode} = {convertedAmount} {targetCurrencyCode}";
            }
        }
    }

    private decimal CalculateConvertedAmount(Rate sourceCurrency, Rate targetCurrency)
    {
        decimal convertedAmount = (amountToConvert * sourceCurrency.Mid) / targetCurrency.Mid;
        convertedAmount = Math.Round(convertedAmount, 2);

        return convertedAmount;
    }

    private void SwapCurrencies()
    {
        string temp = sourceCurrencyCode;
        sourceCurrencyCode = targetCurrencyCode;
        targetCurrencyCode = temp;
        ConvertCurrency(); // Dodane wywołanie konwersji po zamianie walut
    }

    private async Task<IEnumerable<string>> SearchCurrency(string text)
    {
        if (currencies == null)
        {
            return new List<string>();
        }

        return await Task.FromResult(currencies
            .SelectMany(cr => cr.Rates)
            .Where(rate => rate.Code.Contains(text, StringComparison.InvariantCultureIgnoreCase))
            .Select(rate => rate.Code));
    }

    private bool SearchItems(string value, string searchString)
    {
        if (searchString == "")
        {
            return true;
        }

        if (value.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        return false;
    }

}

