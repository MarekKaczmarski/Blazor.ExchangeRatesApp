@page "/currency-calculator"
@using ExchangeRatesApp.Client.Services
@using ExchangeRatesApp.Client.Helpers
@using ExchangeRatesApp.Models
@inject ICurrencyService CurrencyService

<h3>Kalkulator Walutowy</h3>

<MudSelect @bind-Value="@sourceCurrencyCode" Label="Z waluty" Variant="Variant.Outlined">
    @if (currencies != null)
    {
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <MudSelectItem Value="@(currency.Code)">
                <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="14" class="mr-1" /> @currency.Code
            </MudSelectItem>
        }
    }
</MudSelect>

<MudNumericField @bind-Value="amountToConvert" Label="Wprowadź wartość" Variant="Variant.Outlined" @oninput="ConvertCurrency" />

<MudSelect @bind-Value="@targetCurrencyCode" Label="Na walutę" Variant="Variant.Outlined">
    @if (currencies != null)
    {
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <MudSelectItem Value="@currency.Code">
                <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" alt="@currency.Code" height="14" class="mr-1" /> @currency.Code
            </MudSelectItem>
        }
    }
</MudSelect>

<MudButton OnClick="SwapCurrencies">Zamień</MudButton>
<MudButton OnClick="ConvertCurrency">Przewalutuj</MudButton>

<MudPaper>
    <MudTypography Variant="Variant.H6" Class="mt-2">Result:</MudTypography>
    <div class="mt-1">
        @result
    </div>
</MudPaper>

@code {
    private List<CurrencyRates> currencies;
    private string sourceCurrencyCode = "USD";
    private string targetCurrencyCode = "EUR";
    private string result;
    private double amountToConvert = 1.0; // Domyślna wartość 1.0

    protected override async Task OnInitializedAsync()
    {
        currencies = await CurrencyService.GetAllCurrenciesFromAllTables();
    }

    private async Task ConvertCurrency()
    {
        if (currencies != null)
        {
            if (sourceCurrencyCode == targetCurrencyCode)
            {
                result = "Wybrano dwie takie same waluty.";
                return;
            }

            var sourceCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == sourceCurrencyCode);

            var targetCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == targetCurrencyCode);

            if (sourceCurrency != null && targetCurrency != null)
            {
                var convertedAmount = CalculateConvertedAmount(sourceCurrency, targetCurrency);
                result = $"{amountToConvert} {sourceCurrencyCode} = {convertedAmount} {targetCurrencyCode}";
            }
        }
    }

    private double CalculateConvertedAmount(Rate sourceCurrency, Rate targetCurrency)
    {
        return (amountToConvert * sourceCurrency.Mid) / targetCurrency.Mid;
    }

    private void SwapCurrencies()
    {
        string temp = sourceCurrencyCode;
        sourceCurrencyCode = targetCurrencyCode;
        targetCurrencyCode = temp;
        ConvertCurrency(); // Dodane wywołanie konwersji po zamianie walut
    }
}

