@page "/currency-calculator"
@using ExchangeRatesApp.Client.Services
@using ExchangeRatesApp.Models
@inject ICurrencyService CurrencyService

<h3>Currency Converter</h3>

<select @bind="sourceCurrencyCode" class="chooseCurrency">
    @if (currencies != null)
    {
        <option value="PLN">PLN</option>
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <option value="@currency.Code">
                <img class="flag-image" src="/images/flags/@GetFlagImageName(currency.Code)" alt="@currency.Code" /> @currency.Code
            </option>
        }
    }
</select>

<input type="number" @bind="amountToConvert" placeholder="Enter amount" />

<select @bind="targetCurrencyCode" class="chooseCurrency">
    @if (currencies != null)
    {
        <option value="PLN">PLN</option>
        @foreach (var currency in currencies.SelectMany(cr => cr.Rates))
        {
            <option value="@currency.Code">
                <img class="flag-image" src="/images/flags/@GetFlagImageName(currency.Code)" alt="@currency.Code"/> @currency.Code
            </option>
        }
    }
</select>

<button @onclick="SwapCurrencies">Swap</button>
<button @onclick="ConvertCurrency">Convert</button>


<div>
    @result
</div>

@code {
    private List<CurrencyRates> currencies;
    private string sourceCurrencyCode = "USD";
    private string targetCurrencyCode = "EUR";
    private string result;
    private double amountToConvert = 1.0; // Domyślna wartość 1.0

    protected override async Task OnInitializedAsync()
    {
        currencies = await CurrencyService.GetAllCurrenciesFromAllTables();
    }

    private void ConvertCurrency()
    {
        if (currencies != null)
        {
            if (sourceCurrencyCode == targetCurrencyCode)
            {
                result = "Wybrano dwie takie same waluty.";
                return;
            }
            // Znajdź wybrany kurs walutowy na podstawie sourceCurrencyCode i targetCurrencyCode
            var sourceCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == sourceCurrencyCode);

            var targetCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == targetCurrencyCode);

            if (sourceCurrencyCode == "PLN")
            {
                // Jeśli użytkownik wybrał PLN jako źródłową walutę, przelicz na podstawie PLN
                double convertedAmount = amountToConvert / targetCurrency.Mid;
                result = $"{amountToConvert} PLN = {convertedAmount} {targetCurrencyCode}";
            }
            else if (targetCurrencyCode == "PLN")
            {
                // Jeśli użytkownik wybrał PLN jako docelową walutę, przelicz na podstawie PLN
                double convertedAmount = amountToConvert * sourceCurrency.Mid;
                result = $"{amountToConvert} {sourceCurrencyCode} = {convertedAmount} PLN";
            }
            else if (sourceCurrency != null && targetCurrency != null)
            {
                // W przeciwnym wypadku, przelicz normalnie między dwiema walutami
                double convertedAmount = (amountToConvert * sourceCurrency.Mid) / targetCurrency.Mid;
                result = $"{amountToConvert} {sourceCurrencyCode} = {convertedAmount} {targetCurrencyCode}";
            }
            else
            {
                result = "Kurs walutowy nie znaleziony.";
            }
        }
    }

    private void SwapCurrencies()
    {
        string temp = sourceCurrencyCode;
        sourceCurrencyCode = targetCurrencyCode;
        targetCurrencyCode = temp;
    }

    private string GetFlagImageName(string currencyCode)
    {
        return $"{currencyCode.ToLower()}.png";
    }
}
