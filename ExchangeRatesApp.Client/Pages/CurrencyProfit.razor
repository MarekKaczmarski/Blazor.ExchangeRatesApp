@page "/currency-profit"

@using ExchangeRatesApp.Client.Helpers;
@using Serilog;
@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using MudBlazor
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject ICurrencyService CurrencyService

<MudItem xs="4">
    <MudSelect Class="d-flex align-left justify-center" 
               FullWidth="false" 
               MultiSelection="true" 
               @bind-SelectedValues="options" 
               Label="Wybierz waluty" 
               Variant="Variant.Outlined" 
               Clearable="true" 
               AnchorOrigin="Origin.BottomCenter">

        @if (Rates != null)
        {
            foreach (var rate in Rates)
            {
                <MudSelectItem Value="@rate.Code">
                    <img src="/images/flags/@CurrencyHelper.GetFlagImageName(rate.Code)" height="24" class="mr-1" /> @($"{rate.Code} - {rate.Currency}")
                </MudSelectItem>
            }
        }
    </MudSelect> 
</MudItem>

<MudGrid Class="mt-6 px-4">
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Wybrane waluty:</MudText>
        @foreach (var selectedCurrency in options)
        {
            var rate = Rates.FirstOrDefault(r => r.Code == selectedCurrency);
            if (rate != null)
            {
                if (!selectedCurrencyPurchaseDate.ContainsKey(selectedCurrency))
                {
                    selectedCurrencyPurchaseDate[selectedCurrency] = null;
                    selectedCurrencyPurchaseValue[selectedCurrency] = 0;
                }

                <MudItem Class="mb-16">
                    <MudItem Style="display:flex">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(rate.Code)" height="24" class="mr-1" />
                        <MudText Typo="Typo.body2" Class="pl-1">@($"{rate.Code} - {rate.Currency}")</MudText>
                    </MudItem>

                    <MudItem xs="6">
                        <MudDatePicker Label="Data zakupu"
                                         Clearable
                                         IsDateDisabledFunc="@((DateTime dt)=>((int)dt.DayOfWeek == 0 || (int)dt.DayOfWeek == 6))"
                                         @bind-Date="@selectedCurrencyPurchaseDate[selectedCurrency]" />
                        <MudNumericField Label="Wartość zakupu (PLN)" 
                                         @bind-Value="@selectedCurrencyPurchaseValue[selectedCurrency]" Pattern="[0-9]" Clearable/>
                    </MudItem>

                    <MudText>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                        }
                        
                        else if (profitCalculated)
                        {
                            @if (profits.ContainsKey(selectedCurrency))
                            {
                                @if (profits[selectedCurrency] >= 0)
                                {
                                        <MudAlert Severity="Severity.Success">Zysk: @Math.Round(profits[selectedCurrency], 2)</MudAlert>
                                }
                                else
                                {
                                        <MudAlert Severity="Severity.Error">Strata: @Math.Round(profits[selectedCurrency], 2)</MudAlert>
                                }                              
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Error">Brak danych dla wybranej waluty</MudAlert>
                            }
                        }
                    </MudText>

                </MudItem>
            }
        }
    </MudItem>
</MudGrid>

<MudItem xs="12" Class="d-flex align-center">
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Wallet" Color="Color.Primary" OnClick="@CalculateProfit">Oblicz Zysk/Stratę</MudButton>
</MudItem>

<MudText>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
    else if (profitCalculated && profits.Any())
    {
            @if (totalProfit >= 0)
            {
                <MudAlert Severity="Severity.Success">Całkowity zysk: @totalProfit</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Error">Całkowita strata: @totalProfit</MudAlert>
            }
       
    }
</MudText>

@code {
    private bool multiselectionTextChoice;
    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    DateTime? purchaseDate = DateTime.Today;
    decimal purchaseValue = 0;
    private decimal profit = 0;

    private List<CurrencyRates> CurrencyRates = new List<CurrencyRates>();
    private List<Rate> Rates = new List<Rate>();

    private Dictionary<string, DateTime?> selectedCurrencyPurchaseDate = new Dictionary<string, DateTime?>();
    private Dictionary<string, decimal> selectedCurrencyPurchaseValue = new Dictionary<string, decimal>();
    private Dictionary<string, decimal> profits = new Dictionary<string, decimal>();

    private bool profitCalculated = false;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        CurrencyRates = await CurrencyService.GetAllCurrenciesFromAllTables();
        Rates = CurrencyRates.SelectMany(currencyRates => currencyRates.Rates).ToList();
    }

    private async Task CalculateProfit()
    {
        CurrencyRates exchangeRates;

        errorMessage = string.Empty;
        profitCalculated = false;
        profits.Clear();
        profit = 0;

        if (options.Any())
        {
            foreach (var selectedCurrency in options)
            {
                var purchaseDate = selectedCurrencyPurchaseDate[selectedCurrency];
                var purchaseValue = selectedCurrencyPurchaseValue[selectedCurrency];

                if (purchaseDate.HasValue)
                {
                    var currentRate = Rates.FirstOrDefault(r => r.Code == selectedCurrency)?.Mid;
                    if (currentRate == null)
                    {
                        continue;
                    }

                    try 
                    {
                        exchangeRates = await CurrencyService.GetExchangeRatesOnDate(selectedCurrency, purchaseDate.Value);

                        if (exchangeRates == null || exchangeRates.Rates == null || !exchangeRates.Rates.Any())
                        {
                            return;
                        }
                    }
                    catch (HttpRequestException)
                    {
                        errorMessage = "Brak kursów dla podanej daty";
                        return;
                    }

                    var purchaseRate = exchangeRates?.Rates.FirstOrDefault()?.Mid;
                    if (purchaseRate == null)
                    {
                        continue;
                    }

                    var currentPurchaseValue = purchaseValue / purchaseRate.Value * currentRate.Value;
                    var profitLoss = currentPurchaseValue - purchaseValue;

                    // zysk/strata do słownika dla każdej waluty
                    if (profits.ContainsKey(selectedCurrency))
                    {
                        profits[selectedCurrency] += profitLoss;
                    }
                    else
                    {
                        profits[selectedCurrency] = profitLoss;
                    }
                }
                else
                {
                    continue;
                }
            }

            profitCalculated = true;
        }
        else
        {
            //brak wybranych walut
        }

    }

    private decimal totalProfit => Math.Round(profits.Values.Sum(), 2);
    private bool FutureDate(DateTime dt)
    {
        DateTime today = DateTime.Now.Date;
        return dt.Date >= today;
    }
}

