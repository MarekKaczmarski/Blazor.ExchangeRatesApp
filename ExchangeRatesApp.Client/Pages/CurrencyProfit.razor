@page "/currency-profit"

@using ExchangeRatesApp.Client.Helpers;
@using ExchangeRatesApp.Models.RatesChooseDate;
@using Serilog;
@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using MudBlazor
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject ICurrencyService CurrencyService
@inject CurrencyDataService currencyDataService

<MudSelect Class="d-flex align-left justify-center" FullWidth="false" MultiSelection="true" @bind-Value="@value" @bind-SelectedValues="options" Label="Waluta" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @if (Rates != null)
    {
        foreach (var rate in Rates)
        {
            <MudSelectItem Value="@rate.Code">
                <img src="/images/flags/@CurrencyHelper.GetFlagImageName(rate.Code)" height="24" class="mr-1" /> @($"{rate.Code} - {rate.Currency}")
            </MudSelectItem>
        }
    }
</MudSelect> 


<MudNumericField Label="Wartość zakupu" @bind-Value="purchaseValue" />

<MudDatePicker Label="Data zakupu" @bind-Date="purchaseDate" />

<MudButton OnClick="@CalculateProfit">Oblicz Zysk/Stratę</MudButton>

<MudGrid Class="mt-6 px-4">
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Waluty:</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Wybrane waluty: HashSet&lt;string&gt;</MudText>
        <MudText Typo="Typo.subtitle2">{</MudText>
        @foreach (var selectedCurrency in options)
        {
            var rate = Rates.FirstOrDefault(r => r.Code == selectedCurrency);
            if (rate != null)
            {
                if (!selectedCurrencyPurchaseDate.ContainsKey(selectedCurrency))
                {
                    selectedCurrencyPurchaseDate[selectedCurrency] = null; // Dodaj pustą wartość dla daty
                    selectedCurrencyPurchaseValue[selectedCurrency] = 0; // Dodaj wartość 0 dla wartości zakupu
                }

                <div>
                    <img src="/images/flags/@CurrencyHelper.GetFlagImageName(rate.Code)" height="24" class="mr-1" />
                    <MudText Typo="Typo.body2" Class="pl-1">@($"\"{rate.Code} - {rate.Currency}\"")</MudText>

                        <!-- Dodaj pola dla daty i wartości dla każdej waluty -->
                        <MudDatePicker Label="Data zakupu" @bind-Date="@selectedCurrencyPurchaseDate[selectedCurrency]" />
                        <MudNumericField Label="Wartość zakupu" @bind-Value="@selectedCurrencyPurchaseValue[selectedCurrency]" />
                    </div>

                @* <MudText Typo="Typo.body2" Class="pl-4">
                    <img src="/images/flags/@CurrencyHelper.GetFlagImageName(rate.Code)" height="24" class="mr-1" />@($"\"{rate.Code} - {rate.Currency}\"")
                </MudText>

                <!-- Dodaj pola dla daty i wartości dla każdej waluty -->
                @if (selectedCurrencyPurchaseDate.ContainsKey(selectedCurrency))
                {
                    <MudDatePicker Label="Data zakupu" @bind-Date="@selectedCurrencyPurchaseDate[selectedCurrency]" />
                    <MudNumericField Label="Wartość zakupu" @bind-Value="@selectedCurrencyPurchaseValue[selectedCurrency]" />
                }
                else
                {
                    <div>
                        <!-- Obsługa braku wartości dla danego klucza -->
                        <p>Brak danych dla wybranej waluty.</p>
                    </div>
                } *@
            }
        }
        <MudText Typo="Typo.subtitle2">}</MudText>
    </MudItem>
</MudGrid>

<p>
    @if (profitCalculated)
    {
        <strong>Zysk/Strata:</strong> @profit
    }
</p>

@code {
    private bool multiselectionTextChoice;
    private string value { get; set; } = "Brak wybranych walut";
    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    DateTime? purchaseDate = DateTime.Today;
    decimal purchaseValue = 0;
    private decimal profit = 0;

    private List<Rate> Rates = new List<Rate>();
    private List<Rate> selectedCurrencies = new List<Rate>();

    private Dictionary<string, DateTime?> selectedCurrencyPurchaseDate = new Dictionary<string, DateTime?>();
    private Dictionary<string, decimal> selectedCurrencyPurchaseValue = new Dictionary<string, decimal>();

    private bool profitCalculated = false;

    protected override async Task OnInitializedAsync()
    {
        Rates = await CurrencyService.GetAllRatesFromAllTables();
    }

    private async Task CalculateProfit()
    {
        if (options.Any())
        {
            foreach (var selectedCurrency in options)
            {
                var purchaseDate = selectedCurrencyPurchaseDate[selectedCurrency];
                var purchaseValue = selectedCurrencyPurchaseValue[selectedCurrency];

                var exchangeRates = await currencyDataService.GetExchangeRatesOnDate(selectedCurrency, purchaseDate.Value);

                if (exchangeRates != null && exchangeRates.Rates.Any())
                {
                    var selectedCurrencyRate = exchangeRates.Rates.First();

                    decimal purchaseValueInSelectedCurrency = purchaseValue / selectedCurrencyRate.Mid;
                    profit += (purchaseValueInSelectedCurrency * selectedCurrencyRate.Mid) - purchaseValue;
                }
                else
                {
                    // Obsługa błędu - brak kursu dla wybranej waluty na wybraną datę
                }
            }

            profitCalculated = true;
        }
        else
        {
            // Obsługa błędu - brak wybranych walut
        }
    }
}
