@page "/currency-detail/{code}"

@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using ExchangeRatesApp.Models.RatesChooseDate;
@using Color = MudBlazor.Color

@inject CurrencyDataService currencyDataService
@inject ICurrencyService CurrencyService
@inject NavigationManager NavigationManager

<h3>Currency Detail - @Code</h3>

@if (ExchangeRate != null)
{
    <ApexChart TItem="ExchangeRate"
               Title="Historia Kursu"
               Options="@options"
               @ref="chart">

        <ApexPointSeries TItem="ExchangeRate"
                         Items="ExchangeRate.Rates"
                         Name="Kurs średni"
                         SeriesType="SeriesType.Line"
                         XValue="rate => rate.EffectiveDate"
                         YValue="rate => rate.Mid" />
    </ApexChart>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(1)">1M</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(3)">3M</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(6)">6M</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(12)">1R</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>HandleButtonClick(60)">5R</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="HandleCustomButtonClick">MAX</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary">
        <MudDatePicker Label="WŁASNY" DisplayMonths="2" TitleDateFormat="dddd, dd MMMM" @bind-Date="date" />
    </MudButton>

    <div>
        <h4>@ExchangeRate.Currency</h4>
        <p>Code: @ExchangeRate.Code</p>
        <p>Table: @ExchangeRate.Table</p>
        <p>Rates:</p>
        <ul>
            @foreach (var rate in ExchangeRate.Rates)
            {
                <li>No: @rate.No, Date: @rate.EffectiveDate, Mid: @rate.Mid</li>
            }
        </ul>
    </div>
}
else
{
    <p>Exchange rate not found for code: @Code</p>
}


@code {
    [Parameter]
    public string Code { get; set; }

    private ExchangeRatesSeries ExchangeRate { get; set; }
    private DateTime? date { get; set; }
    private ApexChartOptions<ExchangeRate> options;
    private ApexChart<ExchangeRate> chart;

    protected override async Task OnInitializedAsync()
    {
        await LoadExchangeRatesForPeriod(1);
        await base.OnInitializedAsync();
    }

    private async Task LoadExchangeRatesForPeriod(int months)
    {
        var startDate = DateTime.Now.AddMonths(-months);
        var endDate = DateTime.Now;
        await LoadExchangeRates(startDate, endDate);
    }

    private async Task LoadExchangeRatesForCustomPeriod()
    {
        if (date.HasValue)
        {
            var startDate = date.Value;
            var endDate = DateTime.Now;
            await LoadExchangeRates(startDate, endDate);
        }
    }

    private async Task LoadExchangeRates(DateTime startDate, DateTime endDate)
    {
        ExchangeRate = await currencyDataService.GetExchangeRatesInRange(Code, startDate, endDate);

        options = new ApexChartOptions<ExchangeRate>
            {
                Chart = new Chart
                {
                    Height = 350,
                    Width = 500
                }
            };


    }

    private async Task HandleButtonClick(int months)
    {
        await LoadExchangeRatesForPeriod(months);
        await chart.UpdateSeriesAsync(true);
    }

    private async Task HandleCustomButtonClick()
    {
        await LoadExchangeRatesForCustomPeriod();
        await chart.UpdateSeriesAsync(true);
    }
}

