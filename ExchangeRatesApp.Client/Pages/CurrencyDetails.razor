@page "/currency-detail/{code}"

@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using ExchangeRatesApp.Models.RatesChooseDate;

@inject CurrencyDataService currencyDataService
@inject ICurrencyService CurrencyService
@inject NavigationManager NavigationManager

<h3>Currency Detail - @Code</h3>

@if (exchangeRate != null)
{
    <div>
        <h4>@exchangeRate.Currency</h4>
        <p>Code: @exchangeRate.Code</p>
        <p>Table: @exchangeRate.Table</p>
        <p>Rates:</p>
        <ul>
            @foreach (var rate in exchangeRate.Rates)
            {
                <li>No: @rate.No, Date: @rate.EffectiveDate, Mid: @rate.Mid</li>
            }
        </ul>
    </div>
}
else
{
    <p>Exchange rate not found for code: @Code</p>
}

@code {
    private ExchangeRatesSeries exchangeRate;

    [Parameter]
    public string Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadExchangeRate();
    }

    private async Task LoadExchangeRate()
    {
        var topCount = 10; // Dostosuj ilość wpisów, jeśli to konieczne

        exchangeRate = await currencyDataService.GetLastXCurrencies(Code, topCount);
    }
}

