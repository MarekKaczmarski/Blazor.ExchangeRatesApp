@page "/currency-detail/{code}"

@using ExchangeRatesApp.Client.Data;
@using ExchangeRatesApp.Client.Services;
@using ExchangeRatesApp.Models;
@using ExchangeRatesApp.Models.RatesChooseDate;

@inject CurrencyDataService currencyDataService
@inject ICurrencyService CurrencyService
@inject NavigationManager NavigationManager

<h3>Currency Detail - @Code</h3>

@if (ExchangeRate != null)
{
    <div>
        <h4>@ExchangeRate.Currency</h4>
        <p>Code: @ExchangeRate.Code</p>
        <p>Table: @ExchangeRate.Table</p>
        <p>Rates:</p>
        <ul>
            @foreach (var rate in ExchangeRate.Rates)
            {
                <li>No: @rate.No, Date: @rate.EffectiveDate, Mid: @rate.Mid</li>
            }
        </ul>
    </div>

    <ApexChart TItem="ExchangeRate"
               Title="Historia Kursu"
               Options="@options">

        <ApexPointSeries TItem="ExchangeRate"
                         Items="ExchangeRate.Rates"
                         Name="Kurs średni"
                         SeriesType="SeriesType.Line"
                         XValue="e => e.EffectiveDate"
                         YValue="e => e.Mid" />
    </ApexChart>
}
else
{
    <p>Exchange rate not found for code: @Code</p>
}


@code {
    private ExchangeRatesSeries ExchangeRate { get; set; }

    private List<ExchangeRate> Data { get; set; } 
    private ApexChartOptions<ExchangeRate> options;

    [Parameter]
    public string Code { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadExchangeRate();
    }

    private async Task LoadExchangeRate()
    {
        var topCount = 10; // Dostosuj ilość wpisów, jeśli to konieczne

        ExchangeRate = await currencyDataService.GetLastXCurrencies(Code, topCount);


        options = new ApexChartOptions<ExchangeRate>
        {
            Chart = new Chart
            {
                Height = 500,
                Width = 1000
            }
        };
    }
}

