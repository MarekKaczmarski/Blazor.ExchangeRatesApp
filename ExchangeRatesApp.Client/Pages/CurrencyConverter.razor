@page "/currency-converter"

@using ExchangeRatesApp.Client.Services
@using ExchangeRatesApp.Client.Helpers
@using ExchangeRatesApp.Models
@using Color = MudBlazor.Color;

@inject ICurrencyService CurrencyService

<h3>Konwerter Walutowy</h3>

<MudContainer>
    <MudItem Class="mb-8" xs="6">
        <MudSelect FullWidth="false" @bind-Value="@sourceCurrencyCode" Label="Z waluty" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" TextChanged="ClearResult" OnClearButtonClick="ClearResult" Clearable>
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="24" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem Class="mb-8" xs="6">
        <MudNumericField @bind-Value="amountToConvert" Label="Wprowadź wartość" Variant="Variant.Outlined" RequiredError="Wprowadź warość" TextChanged="ConvertCurrency" @oninput="ConvertCurrency" />
    </MudItem>

    <MudItem Class="mb-8" xs="6">
        <MudSelect FullWidth="false" @bind-Value="@targetCurrencyCode" Label="Na walute" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" TextChanged="ClearResult" OnClearButtonClick="ClearResult" Clearable>
            @if (uniqueCurrencies != null)
            {
                foreach (var currency in uniqueCurrencies)
                {
                    <MudSelectItem Value="@currency.Code">
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(currency.Code)" height="24" class="mr-1" /> @($"{currency.Code} - {currency.Currency}")
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" Class="d-flex align-center justify-center mb-8 ">
        <MudButton Class="d-flex align-center justify-center" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.SwapHoriz" Color="Color.Primary" OnClick="SwapCurrencies">Zamień</MudButton>
    </MudItem>

    <MudItem xs="6" Class="d-flex align-center justify-center mb-8 ">
        <MudButton Class="d-flex align-center justify-center" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Calculate" Color="Color.Primary" OnClick="ConvertCurrency">Przewalutuj</MudButton>
    </MudItem>

    <MudItem xs="6" Class="d-flex align-center justify-center mb-8 ">
        @if (showResult)
        {
            <MudPaper>
                <div style="font-size: 24px;">
                    @if (sourceCurrencyCode != null && targetCurrencyCode != null)
                    {
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(sourceCurrencyCode)" height="24" class="mr-1" />
                        <span >@result</span>
                        <img src="/images/flags/@CurrencyHelper.GetFlagImageName(targetCurrencyCode)" height="24" class="mr-1" />
                    }
                </div>
            </MudPaper>
        }
    </MudItem>
</MudContainer>

@code {
    private List<CurrencyRates>? currencies;
    private IEnumerable<Rate>? uniqueCurrencies;
    private string sourceCurrencyCode = string.Empty;
    private string targetCurrencyCode = string.Empty;
    private string result = string.Empty;
    private bool showResult = false;

    private decimal amountToConvert = 1.0m;

    protected override async Task OnInitializedAsync()
    {
        currencies = await CurrencyService.GetAllCurrenciesFromAllTables();
        uniqueCurrencies = currencies.SelectMany(cr => cr.Rates).GroupBy(rate => rate.Code).Select(group => group.First());
    }

    private async Task ConvertCurrency()
    {
        showResult = true;
        if (currencies != null && sourceCurrencyCode != null && targetCurrencyCode != null)
        {
            var sourceCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == sourceCurrencyCode);

            var targetCurrency = currencies
                .SelectMany(cr => cr.Rates)
                .FirstOrDefault(rate => rate.Code == targetCurrencyCode);

            if (sourceCurrency != null && targetCurrency != null)
            {
                var convertedAmount = CalculateConvertedAmount(sourceCurrency, targetCurrency);
                result = $"{amountToConvert} {sourceCurrencyCode} = {convertedAmount} {targetCurrencyCode}";
            }
        }
    }

    private decimal CalculateConvertedAmount(Rate sourceCurrency, Rate targetCurrency)
    {
        decimal convertedAmount = (amountToConvert * sourceCurrency.Mid) / targetCurrency.Mid;
        convertedAmount = Math.Round(convertedAmount, 2);

        return convertedAmount;
    }

    private void SwapCurrencies()
    {
        string temp = sourceCurrencyCode;
        sourceCurrencyCode = targetCurrencyCode;
        targetCurrencyCode = temp;
    }

    private void ClearResult()
    {
        result = string.Empty;
        showResult = false;
    }

    // private async Task<IEnumerable<string>> SearchCurrency(string text)
    // {
    //     if (currencies == null)
    //     {
    //         return new List<string>();
    //     }

    //     return await Task.FromResult(currencies
    //         .SelectMany(cr => cr.Rates)
    //         .Where(rate => rate.Code.Contains(text, StringComparison.InvariantCultureIgnoreCase))
    //         .Select(rate => rate.Code));
    // }

    // private bool SearchItems(string value, string searchString)
    // {
    //     if (searchString == "")
    //     {
    //         return true;
    //     }

    //     if (value.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase))
    //     {
    //         return true;
    //     }

    //     return false;
    // }
}

